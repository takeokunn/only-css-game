// length of the game
$game-length: 8s !default;

// Size of the character pixels
$pixel-size: 4px !default;

// _base.scss

* {
  box-sizing: border-box;
}

html,
body, {
  font-family: 'Open Sans', sans-serif;
  margin: 0;
  padding: 0;
}

.stopper {
  overflow: hidden;
}

ul,
li {
  position: relative;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

h1, h2 {
  text-align: center;
  margin: .3em;
}

body {
      background-size: cover;
      background-position: 50%;
}

// _board.scss

.game-area {
  display: grid;
  grid-template: 1fr 1fr 1fr / 1fr 1fr 1fr;
  grid-gap: 20px;
  width: 70vw;
  height: 80vh;
  margin: 0 auto;
  max-width: 800px;

  li {
    background: linear-gradient(rgba(255,210,0,.9), rgba(49, 196, 59, .9) 50%);
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

.shield {
  background: rgb(52, 15, 142);
  display: block;
  width: 100%;
  height: 60%;
  position: absolute;
  bottom: 0;
  left: 0;
  z-index: 4;
}

@keyframes move {
  0% {
    transform: translateY(-25px)
  }
  50% {
    transform: translateY(25px)
  }
}

.character,
.click-area {
  animation: move 0.5s infinite ease-in-out alternate forwards;
}

@for $i from 1 through 9 {
  $speed: random()*1.5 + 's';

  li:nth-child(#{$i}) {
    .character,
    .click-area {
      animation-duration: #{$speed};
    }
  }
}

.stopper {
  width: 100vw;
  height: 100vh;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 6;
  background: rgb(66, 205, 178);
  text-align: center;
  font-size: 2em;
  transform: translateY(-100vh);
  animation: stopper 0.5s forwards;
  animation-delay: $game-length;
}

@keyframes stopper {
  from {
    transform: translateY(-100vh);
  }
  to {
     transform: translateY(0vh);
  }
}

@keyframes score {
  from {
    transform: translateY(0vh);
  }
  to {
     transform: translateY(-50vh);
  }
}

h2 {
  z-index: 10;
  position: relative;
  // display: block;
  animation: score 0.5s forwards;
  animation-delay: $game-length + 0.25s;
}

.click-area:checked {
  animation: none;
  pointer-events: none;

  + .character {
    animation: none;
    filter: grayscale(1);
  }

  @extend .pixelized--heart;

  &::after {
    display: block;
    margin-top: -25px;
    animation: rainbow 1s infinite;
  }
}

.click-area {
  &:focus,
  &:active {
    outline: none;
  }
}

@keyframes rainbow {
  from {
    filter: hue-rotate(0deg);
  }
  to{
    filter: hue-rotate(360deg);
  }
}

// _characters.scss

// Setting the colors we're syncing up with
$colors: (
  'w': #fff,
  'k': #000,
  'o': transparent,
  'p': #fdcaaa,
  'a': #bc8e0c,
  'l': #b5eaf7,
  'v': #a0a0ef,
  'b': #3782b5,
  'g': #aaaaaa,
  'n': #0d1959,
  'd': #442233,
  'r': #c69,
  'c': #303515
);

// Mario pixel art matrices!
$pixel-art:(
  tim: (
    (o o o o o o o o o o k k k k k k k o o o o o o o)
    (o o o o o o o o k k a a a a a a a k o k o o o o)
    (o o o o o o o k a a a a a a a a a a k a k o o o)
    (o o o o o k k a a p a a a a a a a a a a k o o o)
    (o k k o k w w k a a p p p p p p a a a a k o o o)
    (k w w k k w w k a p p p p p p p p a a a a k o o)
    (k w w w k w w k p p p p p p p p p p a a a k o o)
    (o k w w k k k k k p w w p p w w p p a k k o o o)
    (k w w w k w w w k w k w p p w k w p a p p k o o)
    (k w w w k w w w k w k w p p w k w p k p p k o o)
    (k w w w w k k w k p p p p p p p p p p k p k o o)
    (o k k w w w w k p p p p p a a a a p p k p k o o)
    (o o o k k k k p k p a a a a a a w a p k k o o o)
    (o o o o k p p p k a p w w w w w p a p k o o o o)
    (o o o o k p p p l k p p a a p p p k k k o o o o)
    (o o o o o k l l l v k p p p p k k l l k k o o o)
    (o o o o o k l l l v v k p p k v v k l l l k o o)
    (o o o o o o k l l l l v v k v v l k l k k p k o)
    (o o o o o o o k l l l l l v l l l l k p p p k o)
    (o o o o o o o k l l l l l v l l l l k p p p k o)
    (o o o o o o o k l l l l l l l l l l k p p k o o)
    (o o o o o o o k b l l l l l l l l l l k k o o o)
    (o o o o o o k b b b b b b b b b b b b k o o o o)
    (o o o o o o k b b b b b b b b b b b b k o o o o)
    (o o o o o k b b b b b b b b b b b b b b k o o o)
    (o o o o o k b b b b b k k k k b b b b b k o o o)
    (o o o k k k b b b b k k k k k k b b b b k k k o)
    (o o k k k k k k k k k k o o k k k k k k k k k k)
    (o o o k k k k k k k k k o o k k k k k k k k k o)
    (o o o o k k k k k k k o o o o k k k k k k k o o)
  ),

  kevin: (
    (o o o o o o o o o o k k k k k k o o o o o o o o)
    (o o o o o o o o k k g g g g g g k k o o o o o o)
    (o o o o o o o k g g g g g g g g g g k o o o o o)
    (o o o o o k k g g g g g g g g g g g g k o o o o)
    (o k k o k w w k g g k k k k k k g g g k o o o o)
    (k w w k k w w k k k k k k k k k k k g g k o o o)
    (k w w w k w w k k k k k k k k k k k k g k o o o)
    (o k w w k k k k k k w w p p w w k k k k k o o o)
    (k w w w k w w w k w k w p p w k w p k p p k o o)
    (k w w w k w w w k w k w p p w k w p k p p k o o)
    (k w w w w k k w k p p p p p p p p p p k p k o o)
    (o k k w w w w k p p k k k k k k p p p k p k o o)
    (o o o k k k k p k k k k k k k k k k p k k o o o)
    (o o o o k p p p k k k p p p p p k k k k o o o o)
    (o o o o k p p p w k p p k k p p p k k k o o o o)
    (o o o o o k w w w w k p p p p k k w w k k o o o)
    (o o o o o k w w w w w k k k k w w k w w w k o o)
    (o o o o o o k w w w w w w w w w w k w k k p k o)
    (o o o o o o o k w w w w w w w w w w k p p p k o)
    (o o o o o o o k w w w w w w w w w w k p p p k o)
    (o o o o o o o k w w w w w w w w w w k p p k o o)
    (o o o o o o o k w w w w w w w w w w w k k o o o)
    (o o o o o o k n n n n n n n n n n n n k o o o o)
    (o o o o o o k n n n n n n n n n n n n k o o o o)
    (o o o o o k n n n n n n n n n n n n n n k o o o)
    (o o o o o k n n n n n k k k k n n n n n k o o o)
    (o o o k k k n n n n k k k k k k n n n n k k k o)
    (o o k k k k k k k k k k o o k k k k k k k k k k)
    (o o o k k k k k k k k k o o k k k k k k k k k o)
    (o o o o k k k k k k k o o o o k k k k k k k o o)
  ),

  kristina: (
    (o o o o o o o o o o o o k k k k k o o o o o o o)
    (o o o o o o o o k k k k d d d d d k k o o o o o)
    (o o o o o o o k d d d d d d d d d d d k o o o o)
    (o o o o o k k d d d d p p p p p d d d k o o o o)
    (o k k o k w w k d p p p p p p p p d d d k o o o)
    (k w w k k w w k d p p p p p p k k d d d d k k o)
    (k w w w k w w k k k k p p p p p p d d d d d k o)
    (o k w w k k k k k k w w p p w w k d d d d d k o)
    (k w w w k w w w k w k w p p w k w d d d d d d k)
    (k w w w k w w w k w k w p p w k w k d d d d k o)
    (k w w w w k k w k p p p p p p p p p p d d k o o)
    (o k k w w w w k p p p p p p p p p p p k p k o o)
    (o o o k k k k k p p p p r r r r p p p k k o o o)
    (o o o o k k k k k p p r r r r p p p k o o o o o)
    (o o o o k k k k k k p p p p p p p k k k o o o o)
    (o o o o o k k k k k k p p p p k k k k k k o o o)
    (o o o o o k k k k k p p p p p p k k k k k k o o)
    (o o o o o o k k k k k k k k k k k k k k k p k o)
    (o o o o o o o k k k k k k k k k k k k p p p k o)
    (o o o o o o o k k k k k k k k k k k k p p p k o)
    (o o o o o o o k k k k k k k k k k k k p p k o o)
    (o o o o o o o k k k k k k k k k k k k k k o o o)
    (o o o o o o k c c c c c c c c c c c c k o o o o)
    (o o o o o o k c c c c c c c c c c c c k o o o o)
    (o o o o o k c c c c c c c c c c c c c c k o o o)
    (o o o o o k c c c c c k k k k c c c c c k o o o)
    (o o o k k c c c c c k k k k k k c c c c c k k o)
    (o o k k k k k k k k k k o o k k k k k k k k k k)
    (o o o k k k k k k k k k o o k k k k k k k k k o)
    (o o o o k k k k k k k o o o o k k k k k k k o o)
  ),

  polly: (
    (o o o o o o o o o o o o k k k k k o o o o o o o)
    (o o o o o o o o k k k k d d d d d k k o o o o o)
    (o o o o o o o k d d d d d d d d d d d k o o o o)
    (o o o o o k k d d d p p d d d d d d d k o o o o)
    (o k k o k w w k d p p p p d d d d d d d k o o o)
    (k w w k k w w k d p p p p p p d d d d d d k o o)
    (k w w w k w w k k k k p p p p p d d d d d d o o)
    (o k w w k k k k k k w w p p w w k d d d d d k o)
    (k w w w k w w w k w k w p p w k w d d d d d k o)
    (k w w w k w w w k w k w p p w k w d d d d d k o)
    (k w w w w k k w k p p p p p p p p p d d d d k o)
    (o k k w w w w k p p p p p p p p p p d d d d k o)
    (o o o k k k k k p p p r r r r p p p d d d d k o)
    (o o o o k w w w p p p p r r p p p d d d d k o o)
    (o o o o k w w w w p p p p p p p d d d d d o o o)
    (o o o o o k w w w w k p p p p p d d d d d o o o)
    (o o o o o k k w w w w k p p k d d d d d d k o o)
    (o o o o o o k w w w w w k k d d d d d k w w k o)
    (o o o o o o o k w g g g w k d d w w k w w w k o)
    (o o o o o o o k w w g g w g w w w w k w w w k o)
    (o o o o o o o k w w w w w g w w w w k w w k o o)
    (o o o o o o o k g g g g g g g g g g g k k o o o)
    (o o o o o o k w k w k w k w k w k w k k o o o o)
    (o o o o o o k w k w k w k w k w k w k k o o o o)
    (o o o o o k k w k w k w k w k w k w k w k o o o)
    (o o o o o k k w k w k w k w k w k w k w k o o o)
    (o o o k k w k w k w k w k w k w k w k w w k k o)
    (o o k k k k k k k k k k o o k k k k k k k k k k)
    (o o o k k k k k k k k k o o k k k k k k k k k o)
    (o o o o k k k k k k k o o o o k k k k k k k o o)
  ),
  jessica: (
    (o o o o o o o o o o o o k k k k k o o o o o o o)
    (o o o o o o o o k k k k d d d d d k k o o o o o)
    (o o o o o o o k d d d d d d d d d d d k o o o o)
    (o o o o o k k d d d p p d d d d d d d k o o o o)
    (o k k o k w w k d p p p p d d d d d d d k o o o)
    (k w w k k w w k d p p p p p p d d d d d d k o o)
    (k w w w k w w k k k k p p p p p d d d d d d o o)
    (o k w w k k k k k k w w p p w w k d d d d d k o)
    (k w w w k w w w k w k w p p w k w d d d d d k o)
    (k w w w k w w w k w k w p p w k w d d d d d k o)
    (k w w w w k k w k p p p p p p p p p p d p d k o)
    (o k k w w w w k d p p p p p p p p p p d d d k o)
    (o o o k k k k k d p p w w w w p p p p d d d k o)
    (o o o o k g g d d d p p w w p p p d d d d k o o)
    (o o o o k g g d d d p p p p p p d d d d d o o o)
    (o o o o o k g g d d k p p p p p d d d d d o o o)
    (o o o o o k k g d d g k p p p d d d d d d k o o)
    (o o o o o o k g g d g g k k k g d d d d k g k o)
    (o o o o o o o k g g g g b b b b g d k k g g k o)
    (o o o o o o o k g g g b g b b g b g k g g g k o)
    (o o o o o o o k g g g g g g g g g g k g g k o o)
    (o o o o o o o k g g g g b b b b g g g k k o o o)
    (o o o o o o k g g g g g g g g g g g g k o o o o)
    (o o o o o o k b b b b b b b b b b b b k o o o o)
    (o o o o o k b b b b b b b b b b b b b b k o o o)
    (o o o o o k b b b b b k k k k b b b b b k o o o)
    (o o o k k b b b b b k k k k k k b b b b b k k o)
    (o o k k k k k k k k k k o o k k k k k k k k k k)
    (o o o k k k k k k k k k o o k k k k k k k k k o)
    (o o o o k k k k k k k o o o o k k k k k k k o o)
  ),
  heart: (
    (o o r r o r r o o)
    (o r r r r r r r o)
    (o r r r r r r r o)
    (o o r r r r r o o)
    (o o o r r r o o o)
    (o o o o r o o o o)
  )
);

// Function to read the matrix and pixelize it!
@function pixelize($matrix, $size){
    $l: length($matrix);
    $sh: '';

    @for $row from 1 through $l{
      $row-num: nth($matrix,$row); //

      @for $col from 1 through length($row-num){
        $dot: nth($row-num,$col);

        $sh:  $sh + ($col*$size) + ' ' + ($row*$size) + ' ' + map-get($colors, $dot);

        @if not ($col == length($row-num) and $row == $l) {
          $sh: $sh + ',';
        }
      }
    }

    @return unquote($sh);
}

// Mixin to style each item
@mixin style-item($matrix, $size){
  width:($size * length(nth($matrix,1)));
  height:($size * length($matrix));

  &:after{
    content: '';
    position: absolute;
    top: (-$size);
    left: (-$size);
    width: $size;
    height: $size;
    box-shadow: pixelize($matrix,$size);
  }
}

.pixelized {
  list-style: none;

   @each $key, $value in $pixel-art{
    &--#{$key}{
      @include style-item($value, $pixel-size);
    }
  }
}

.character-wrapper {
  position: relative;
}

// _gameplay.scss

.click-area {
  position: absolute;
  width: 40px;
  height: 40px;
  z-index: 3;
  display: block;
  top: 10px;
  left: -5px;
  appearance: none;
  cursor: grab;
}

.game-area {
  counter-reset: game;
}

.score::after {
  content: counter(game);
}

.click-area:checked {
  counter-increment: game;
}

.length::after {
  content: '#{$game-length}';
}

// CSS Confetti stolen from: https://codepen.io/yshlin/pen/ylDEk

$particles: 50;
$conf-width: 500;
$conf-height: 500;

// Create the explosion...
$box-shadow: ();
$box-shadow2: ();
@for $i from 0 through $particles {
  $box-shadow: $box-shadow,
               random($conf-width)-$conf-width / 2 + px
               random($conf-height)-$conf-height / 1.2 + px
               hsl(random(360), 100, 50);
  $box-shadow2: $box-shadow2, 0 0 #fff
}

.pyro > .before, .pyro > .after {
  position: absolute;
  width: 5px;
  height: 5px;
  border-radius: 50%;
  box-shadow: $box-shadow2;
  animation: 1s bang ease-out infinite backwards, 1s gravity ease-in infinite backwards, 5s position linear infinite backwards;
}

.pyro > .after {
  animation-delay: 1.25s, 1.25s, 1.25s;
  animation-duration: 1.25s, 1.25s, 6.25s;
}

@keyframes bang {
  to {
    box-shadow:$box-shadow;
  }
}

@keyframes gravity {
  to {
    transform: translateY(200px);
    opacity: 0;
  }
}

@keyframes position {
  0%, 19.9% {
    margin-top: 10%;
    margin-left: 40%;
  }
  20%, 39.9% {
    margin-top: 40%;
    margin-left: 30%;
  }
  40%, 59.9% {
    margin-top: 20%;
    margin-left: 70%
  }
  60%, 79.9% {
    margin-top: 30%;
    margin-left: 20%;
  }
  80%, 99.9% {
    margin-top: 30%;
    margin-left: 80%;
  }
}
